[
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "runpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "runpy",
        "description": "runpy",
        "detail": "runpy",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "field",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "field",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "UTC",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "AIMessage",
        "importPath": "langchain_core.messages",
        "description": "langchain_core.messages",
        "isExtraImport": true,
        "detail": "langchain_core.messages",
        "documentation": {}
    },
    {
        "label": "AnyMessage",
        "importPath": "langchain_core.messages",
        "description": "langchain_core.messages",
        "isExtraImport": true,
        "detail": "langchain_core.messages",
        "documentation": {}
    },
    {
        "label": "BaseMessage",
        "importPath": "langchain_core.messages",
        "description": "langchain_core.messages",
        "isExtraImport": true,
        "detail": "langchain_core.messages",
        "documentation": {}
    },
    {
        "label": "StateGraph",
        "importPath": "langgraph.graph",
        "description": "langgraph.graph",
        "isExtraImport": true,
        "detail": "langgraph.graph",
        "documentation": {}
    },
    {
        "label": "add_messages",
        "importPath": "langgraph.graph",
        "description": "langgraph.graph",
        "isExtraImport": true,
        "detail": "langgraph.graph",
        "documentation": {}
    },
    {
        "label": "ToolNode",
        "importPath": "langgraph.prebuilt",
        "description": "langgraph.prebuilt",
        "isExtraImport": true,
        "detail": "langgraph.prebuilt",
        "documentation": {}
    },
    {
        "label": "Runtime",
        "importPath": "langgraph.runtime",
        "description": "langgraph.runtime",
        "isExtraImport": true,
        "detail": "langgraph.runtime",
        "documentation": {}
    },
    {
        "label": "get_runtime",
        "importPath": "langgraph.runtime",
        "description": "langgraph.runtime",
        "isExtraImport": true,
        "detail": "langgraph.runtime",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "react_agent.context",
        "description": "react_agent.context",
        "isExtraImport": true,
        "detail": "react_agent.context",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "react_agent.context",
        "description": "react_agent.context",
        "isExtraImport": true,
        "detail": "react_agent.context",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "react_agent.context",
        "description": "react_agent.context",
        "isExtraImport": true,
        "detail": "react_agent.context",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "react_agent.context",
        "description": "react_agent.context",
        "isExtraImport": true,
        "detail": "react_agent.context",
        "documentation": {}
    },
    {
        "label": "InputState",
        "importPath": "react_agent.state",
        "description": "react_agent.state",
        "isExtraImport": true,
        "detail": "react_agent.state",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "react_agent.state",
        "description": "react_agent.state",
        "isExtraImport": true,
        "detail": "react_agent.state",
        "documentation": {}
    },
    {
        "label": "TOOLS",
        "importPath": "react_agent.tools",
        "description": "react_agent.tools",
        "isExtraImport": true,
        "detail": "react_agent.tools",
        "documentation": {}
    },
    {
        "label": "ChatOpenAI",
        "importPath": "langchain_openai",
        "description": "langchain_openai",
        "isExtraImport": true,
        "detail": "langchain_openai",
        "documentation": {}
    },
    {
        "label": "PostgresSaver",
        "importPath": "langgraph.checkpoint.postgres",
        "description": "langgraph.checkpoint.postgres",
        "isExtraImport": true,
        "detail": "langgraph.checkpoint.postgres",
        "documentation": {}
    },
    {
        "label": "IsLastStep",
        "importPath": "langgraph.managed",
        "description": "langgraph.managed",
        "isExtraImport": true,
        "detail": "langgraph.managed",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "TavilySearch",
        "importPath": "langchain_tavily",
        "description": "langchain_tavily",
        "isExtraImport": true,
        "detail": "langchain_tavily",
        "documentation": {}
    },
    {
        "label": "init_chat_model",
        "importPath": "langchain.chat_models",
        "description": "langchain.chat_models",
        "isExtraImport": true,
        "detail": "langchain.chat_models",
        "documentation": {}
    },
    {
        "label": "BaseChatModel",
        "importPath": "langchain_core.language_models",
        "description": "langchain_core.language_models",
        "isExtraImport": true,
        "detail": "langchain_core.language_models",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "unit",
        "importPath": "langsmith",
        "description": "langsmith",
        "isExtraImport": true,
        "detail": "langsmith",
        "documentation": {}
    },
    {
        "label": "graph",
        "importPath": "react_agent",
        "description": "react_agent",
        "isExtraImport": true,
        "detail": "react_agent",
        "documentation": {}
    },
    {
        "label": "BadZipFile",
        "importPath": "zipfile",
        "description": "zipfile",
        "isExtraImport": true,
        "detail": "zipfile",
        "documentation": {}
    },
    {
        "label": "ZipFile",
        "importPath": "zipfile",
        "description": "zipfile",
        "isExtraImport": true,
        "detail": "zipfile",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "mysql.connector",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mysql.connector",
        "description": "mysql.connector",
        "detail": "mysql.connector",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "_Known",
        "kind": 6,
        "importPath": "aws-lambda-sidecar.code.nodejs-demo-api.src.node_modules.flatted.python.flatted",
        "description": "aws-lambda-sidecar.code.nodejs-demo-api.src.node_modules.flatted.python.flatted",
        "peekOfCode": "class _Known:\n    def __init__(self):\n        self.key = []\n        self.value = []\nclass _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0",
        "detail": "aws-lambda-sidecar.code.nodejs-demo-api.src.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "aws-lambda-sidecar.code.nodejs-demo-api.src.node_modules.flatted.python.flatted",
        "description": "aws-lambda-sidecar.code.nodejs-demo-api.src.node_modules.flatted.python.flatted",
        "peekOfCode": "class _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0\n    for _ in value:\n        keys.append(i)\n        i += 1\n    return keys",
        "detail": "aws-lambda-sidecar.code.nodejs-demo-api.src.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "aws-lambda-sidecar.code.nodejs-demo-api.src.node_modules.flatted.python.flatted",
        "description": "aws-lambda-sidecar.code.nodejs-demo-api.src.node_modules.flatted.python.flatted",
        "peekOfCode": "def parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:",
        "detail": "aws-lambda-sidecar.code.nodejs-demo-api.src.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "aws-lambda-sidecar.code.nodejs-demo-api.src.node_modules.flatted.python.flatted",
        "description": "aws-lambda-sidecar.code.nodejs-demo-api.src.node_modules.flatted.python.flatted",
        "peekOfCode": "def stringify(value, *args, **kwargs):\n    known = _Known()\n    input = []\n    output = []\n    i = int(_index(known, input, value))\n    while i < len(input):\n        output.append(_transform(known, input, input[i]))\n        i += 1\n    return _json.dumps(output, *args, **kwargs)",
        "detail": "aws-lambda-sidecar.code.nodejs-demo-api.src.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_Known",
        "kind": 6,
        "importPath": "hyperledger-besu-erc20.node_modules.flatted.python.flatted",
        "description": "hyperledger-besu-erc20.node_modules.flatted.python.flatted",
        "peekOfCode": "class _Known:\n    def __init__(self):\n        self.key = []\n        self.value = []\nclass _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0",
        "detail": "hyperledger-besu-erc20.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "hyperledger-besu-erc20.node_modules.flatted.python.flatted",
        "description": "hyperledger-besu-erc20.node_modules.flatted.python.flatted",
        "peekOfCode": "class _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0\n    for _ in value:\n        keys.append(i)\n        i += 1\n    return keys",
        "detail": "hyperledger-besu-erc20.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "hyperledger-besu-erc20.node_modules.flatted.python.flatted",
        "description": "hyperledger-besu-erc20.node_modules.flatted.python.flatted",
        "peekOfCode": "def parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:",
        "detail": "hyperledger-besu-erc20.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "hyperledger-besu-erc20.node_modules.flatted.python.flatted",
        "description": "hyperledger-besu-erc20.node_modules.flatted.python.flatted",
        "peekOfCode": "def stringify(value, *args, **kwargs):\n    known = _Known()\n    input = []\n    output = []\n    i = int(_index(known, input, value))\n    while i < len(input):\n        output.append(_transform(known, input, input[i]))\n        i += 1\n    return _json.dumps(output, *args, **kwargs)",
        "detail": "hyperledger-besu-erc20.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": "langgraph-teams-mcp-database..venv.bin.activate_this",
        "description": "langgraph-teams-mcp-database..venv.bin.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len('bin') - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = 'langgraph-teams-mcp-database-py3.13' or os.path.basename(base)\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in '../lib/python3.13/site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": "langgraph-teams-mcp-database..venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "langgraph-teams-mcp-database..venv.bin.activate_this",
        "description": "langgraph-teams-mcp-database..venv.bin.activate_this",
        "peekOfCode": "base = bin_dir[: -len('bin') - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = 'langgraph-teams-mcp-database-py3.13' or os.path.basename(base)\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in '../lib/python3.13/site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if '' else path)",
        "detail": "langgraph-teams-mcp-database..venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": "langgraph-teams-mcp-database..venv.bin.activate_this",
        "description": "langgraph-teams-mcp-database..venv.bin.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = 'langgraph-teams-mcp-database-py3.13' or os.path.basename(base)\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in '../lib/python3.13/site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if '' else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": "langgraph-teams-mcp-database..venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": "langgraph-teams-mcp-database..venv.bin.activate_this",
        "description": "langgraph-teams-mcp-database..venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = 'langgraph-teams-mcp-database-py3.13' or os.path.basename(base)\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in '../lib/python3.13/site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if '' else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "langgraph-teams-mcp-database..venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": "langgraph-teams-mcp-database..venv.bin.activate_this",
        "description": "langgraph-teams-mcp-database..venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = 'langgraph-teams-mcp-database-py3.13' or os.path.basename(base)\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in '../lib/python3.13/site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if '' else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "langgraph-teams-mcp-database..venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": "langgraph-teams-mcp-database..venv.bin.activate_this",
        "description": "langgraph-teams-mcp-database..venv.bin.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in '../lib/python3.13/site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if '' else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "langgraph-teams-mcp-database..venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": "langgraph-teams-mcp-database..venv.bin.activate_this",
        "description": "langgraph-teams-mcp-database..venv.bin.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "langgraph-teams-mcp-database..venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": "langgraph-teams-mcp-database..venv.bin.activate_this",
        "description": "langgraph-teams-mcp-database..venv.bin.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "langgraph-teams-mcp-database..venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": "langgraph-teams-mcp-database..venv.bin.activate_this",
        "description": "langgraph-teams-mcp-database..venv.bin.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": "langgraph-teams-mcp-database..venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "Context",
        "kind": 6,
        "importPath": "langgraph-teams-mcp-database.langgraph-bot.src.react_agent.context",
        "description": "langgraph-teams-mcp-database.langgraph-bot.src.react_agent.context",
        "peekOfCode": "class Context:\n    \"\"\"The context for the agent.\"\"\"\n    system_prompt: str = field(\n        default=prompts.SYSTEM_PROMPT,\n        metadata={\n            \"description\": \"The system prompt to use for the agent's interactions. \"\n            \"This prompt sets the context and behavior for the agent.\"\n        },\n    )\n    model: Annotated[str, {\"__template_metadata__\": {\"kind\": \"llm\"}}] = field(",
        "detail": "langgraph-teams-mcp-database.langgraph-bot.src.react_agent.context",
        "documentation": {}
    },
    {
        "label": "route_model_output",
        "kind": 2,
        "importPath": "langgraph-teams-mcp-database.langgraph-bot.src.react_agent.graph",
        "description": "langgraph-teams-mcp-database.langgraph-bot.src.react_agent.graph",
        "peekOfCode": "def route_model_output(state: State) -> Literal[\"__end__\", \"tools\"]:\n    \"\"\"Determine the next node based on the model's output.\n    This function checks if the model's last message contains tool calls.\n    Args:\n        state (State): The current state of the conversation.\n    Returns:\n        str: The name of the next node to call (\"__end__\" or \"tools\").\n    \"\"\"\n    last_message = state.messages[-1]\n    if not isinstance(last_message, AIMessage):",
        "detail": "langgraph-teams-mcp-database.langgraph-bot.src.react_agent.graph",
        "documentation": {}
    },
    {
        "label": "DB_URI",
        "kind": 5,
        "importPath": "langgraph-teams-mcp-database.langgraph-bot.src.react_agent.graph",
        "description": "langgraph-teams-mcp-database.langgraph-bot.src.react_agent.graph",
        "peekOfCode": "DB_URI = \"postgresql://postgres:postgrespassword@localhost:5432/postgres?sslmode=disable\"\nasync def call_model(\n    state: State, runtime: Runtime[Context]\n) -> Dict[str, List[AIMessage]]:\n    \"\"\"Call the LLM powering our \"agent\".\n    This function prepares the prompt, initializes the model, and processes the response.\n    Args:\n        state (State): The current state of the conversation.\n        config (RunnableConfig): Configuration for the model run.\n    Returns:",
        "detail": "langgraph-teams-mcp-database.langgraph-bot.src.react_agent.graph",
        "documentation": {}
    },
    {
        "label": "builder",
        "kind": 5,
        "importPath": "langgraph-teams-mcp-database.langgraph-bot.src.react_agent.graph",
        "description": "langgraph-teams-mcp-database.langgraph-bot.src.react_agent.graph",
        "peekOfCode": "builder = StateGraph(State, input_schema=InputState, context_schema=Context)\n# Define the two nodes we will cycle between\nbuilder.add_node(call_model)\nbuilder.add_node(\"tools\", ToolNode(TOOLS))\n# Set the entrypoint as `call_model`\n# This means that this node is the first one called\nbuilder.add_edge(\"__start__\", \"call_model\")\ndef route_model_output(state: State) -> Literal[\"__end__\", \"tools\"]:\n    \"\"\"Determine the next node based on the model's output.\n    This function checks if the model's last message contains tool calls.",
        "detail": "langgraph-teams-mcp-database.langgraph-bot.src.react_agent.graph",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": "langgraph-teams-mcp-database.langgraph-bot.src.react_agent.graph",
        "description": "langgraph-teams-mcp-database.langgraph-bot.src.react_agent.graph",
        "peekOfCode": "graph = builder.compile(name=\"ReAct Agent\")",
        "detail": "langgraph-teams-mcp-database.langgraph-bot.src.react_agent.graph",
        "documentation": {}
    },
    {
        "label": "SYSTEM_PROMPT",
        "kind": 5,
        "importPath": "langgraph-teams-mcp-database.langgraph-bot.src.react_agent.prompts",
        "description": "langgraph-teams-mcp-database.langgraph-bot.src.react_agent.prompts",
        "peekOfCode": "SYSTEM_PROMPT = \"\"\"You are a helpful AI assistant.\nSystem time: {system_time}\"\"\"",
        "detail": "langgraph-teams-mcp-database.langgraph-bot.src.react_agent.prompts",
        "documentation": {}
    },
    {
        "label": "InputState",
        "kind": 6,
        "importPath": "langgraph-teams-mcp-database.langgraph-bot.src.react_agent.state",
        "description": "langgraph-teams-mcp-database.langgraph-bot.src.react_agent.state",
        "peekOfCode": "class InputState:\n    \"\"\"Defines the input state for the agent, representing a narrower interface to the outside world.\n    This class is used to define the initial state and structure of incoming data.\n    \"\"\"\n    messages: Annotated[Sequence[AnyMessage], add_messages] = field(\n        default_factory=list\n    )\n    \"\"\"\n    Messages tracking the primary execution state of the agent.\n    Typically accumulates a pattern of:",
        "detail": "langgraph-teams-mcp-database.langgraph-bot.src.react_agent.state",
        "documentation": {}
    },
    {
        "label": "State",
        "kind": 6,
        "importPath": "langgraph-teams-mcp-database.langgraph-bot.src.react_agent.state",
        "description": "langgraph-teams-mcp-database.langgraph-bot.src.react_agent.state",
        "peekOfCode": "class State(InputState):\n    \"\"\"Represents the complete state of the agent, extending InputState with additional attributes.\n    This class can be used to store any information needed throughout the agent's lifecycle.\n    \"\"\"\n    is_last_step: IsLastStep = field(default=False)\n    \"\"\"\n    Indicates whether the current step is the last one before the graph raises an error.\n    This is a 'managed' variable, controlled by the state machine rather than user code.\n    It is set to 'True' when the step count reaches recursion_limit - 1.\n    \"\"\"",
        "detail": "langgraph-teams-mcp-database.langgraph-bot.src.react_agent.state",
        "documentation": {}
    },
    {
        "label": "get_message_text",
        "kind": 2,
        "importPath": "langgraph-teams-mcp-database.langgraph-bot.src.react_agent.utils",
        "description": "langgraph-teams-mcp-database.langgraph-bot.src.react_agent.utils",
        "peekOfCode": "def get_message_text(msg: BaseMessage) -> str:\n    \"\"\"Get the text content of a message.\"\"\"\n    content = msg.content\n    if isinstance(content, str):\n        return content\n    elif isinstance(content, dict):\n        return content.get(\"text\", \"\")\n    else:\n        txts = [c if isinstance(c, str) else (c.get(\"text\") or \"\") for c in content]\n        return \"\".join(txts).strip()",
        "detail": "langgraph-teams-mcp-database.langgraph-bot.src.react_agent.utils",
        "documentation": {}
    },
    {
        "label": "test_context_init",
        "kind": 2,
        "importPath": "langgraph-teams-mcp-database.langgraph-bot.tests.unit_tests.test_configuration",
        "description": "langgraph-teams-mcp-database.langgraph-bot.tests.unit_tests.test_configuration",
        "peekOfCode": "def test_context_init() -> None:\n    context = Context(model=\"openai/gpt-4o-mini\")\n    assert context.model == \"openai/gpt-4o-mini\"\ndef test_context_init_with_env_vars() -> None:\n    os.environ[\"MODEL\"] = \"openai/gpt-4o-mini\"\n    context = Context()\n    assert context.model == \"openai/gpt-4o-mini\"\ndef test_context_init_with_env_vars_and_passed_values() -> None:\n    os.environ[\"MODEL\"] = \"openai/gpt-4o-mini\"\n    context = Context(model=\"openai/gpt-5o-mini\")",
        "detail": "langgraph-teams-mcp-database.langgraph-bot.tests.unit_tests.test_configuration",
        "documentation": {}
    },
    {
        "label": "test_context_init_with_env_vars",
        "kind": 2,
        "importPath": "langgraph-teams-mcp-database.langgraph-bot.tests.unit_tests.test_configuration",
        "description": "langgraph-teams-mcp-database.langgraph-bot.tests.unit_tests.test_configuration",
        "peekOfCode": "def test_context_init_with_env_vars() -> None:\n    os.environ[\"MODEL\"] = \"openai/gpt-4o-mini\"\n    context = Context()\n    assert context.model == \"openai/gpt-4o-mini\"\ndef test_context_init_with_env_vars_and_passed_values() -> None:\n    os.environ[\"MODEL\"] = \"openai/gpt-4o-mini\"\n    context = Context(model=\"openai/gpt-5o-mini\")\n    assert context.model == \"openai/gpt-5o-mini\"",
        "detail": "langgraph-teams-mcp-database.langgraph-bot.tests.unit_tests.test_configuration",
        "documentation": {}
    },
    {
        "label": "test_context_init_with_env_vars_and_passed_values",
        "kind": 2,
        "importPath": "langgraph-teams-mcp-database.langgraph-bot.tests.unit_tests.test_configuration",
        "description": "langgraph-teams-mcp-database.langgraph-bot.tests.unit_tests.test_configuration",
        "peekOfCode": "def test_context_init_with_env_vars_and_passed_values() -> None:\n    os.environ[\"MODEL\"] = \"openai/gpt-4o-mini\"\n    context = Context(model=\"openai/gpt-5o-mini\")\n    assert context.model == \"openai/gpt-5o-mini\"",
        "detail": "langgraph-teams-mcp-database.langgraph-bot.tests.unit_tests.test_configuration",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": "llm-structured-resilice..venv.bin.activate_this",
        "description": "llm-structured-resilice..venv.bin.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len('bin') - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = 'llm-structured-resilice-py3.12' or os.path.basename(base)\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in '../lib/python3.12/site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": "llm-structured-resilice..venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "llm-structured-resilice..venv.bin.activate_this",
        "description": "llm-structured-resilice..venv.bin.activate_this",
        "peekOfCode": "base = bin_dir[: -len('bin') - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = 'llm-structured-resilice-py3.12' or os.path.basename(base)\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in '../lib/python3.12/site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if '' else path)",
        "detail": "llm-structured-resilice..venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": "llm-structured-resilice..venv.bin.activate_this",
        "description": "llm-structured-resilice..venv.bin.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = 'llm-structured-resilice-py3.12' or os.path.basename(base)\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in '../lib/python3.12/site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if '' else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": "llm-structured-resilice..venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": "llm-structured-resilice..venv.bin.activate_this",
        "description": "llm-structured-resilice..venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = 'llm-structured-resilice-py3.12' or os.path.basename(base)\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in '../lib/python3.12/site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if '' else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "llm-structured-resilice..venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": "llm-structured-resilice..venv.bin.activate_this",
        "description": "llm-structured-resilice..venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = 'llm-structured-resilice-py3.12' or os.path.basename(base)\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in '../lib/python3.12/site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if '' else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "llm-structured-resilice..venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": "llm-structured-resilice..venv.bin.activate_this",
        "description": "llm-structured-resilice..venv.bin.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in '../lib/python3.12/site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if '' else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "llm-structured-resilice..venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": "llm-structured-resilice..venv.bin.activate_this",
        "description": "llm-structured-resilice..venv.bin.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "llm-structured-resilice..venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": "llm-structured-resilice..venv.bin.activate_this",
        "description": "llm-structured-resilice..venv.bin.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "llm-structured-resilice..venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": "llm-structured-resilice..venv.bin.activate_this",
        "description": "llm-structured-resilice..venv.bin.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": "llm-structured-resilice..venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "extract_file",
        "kind": 2,
        "importPath": "llm-structured-resilice..venv.bin.vba_extract",
        "description": "llm-structured-resilice..venv.bin.vba_extract",
        "peekOfCode": "def extract_file(xlsm_zip, filename):\n    # Extract a single file from an Excel xlsm macro file.\n    data = xlsm_zip.read(\"xl/\" + filename)\n    # Write the data to a local file.\n    file = open(filename, \"wb\")\n    file.write(data)\n    file.close()\n# The VBA project file and project signature file we want to extract.\nvba_filename = \"vbaProject.bin\"\nvba_signature_filename = \"vbaProjectSignature.bin\"",
        "detail": "llm-structured-resilice..venv.bin.vba_extract",
        "documentation": {}
    },
    {
        "label": "vba_filename",
        "kind": 5,
        "importPath": "llm-structured-resilice..venv.bin.vba_extract",
        "description": "llm-structured-resilice..venv.bin.vba_extract",
        "peekOfCode": "vba_filename = \"vbaProject.bin\"\nvba_signature_filename = \"vbaProjectSignature.bin\"\n# Get the xlsm file name from the commandline.\nif len(sys.argv) > 1:\n    xlsm_file = sys.argv[1]\nelse:\n    print(\n        \"\\nUtility to extract a vbaProject.bin binary from an Excel 2007+ \"\n        \"xlsm macro file for insertion into an XlsxWriter file.\\n\"\n        \"If the macros are digitally signed, extracts also a vbaProjectSignature.bin \"",
        "detail": "llm-structured-resilice..venv.bin.vba_extract",
        "documentation": {}
    },
    {
        "label": "vba_signature_filename",
        "kind": 5,
        "importPath": "llm-structured-resilice..venv.bin.vba_extract",
        "description": "llm-structured-resilice..venv.bin.vba_extract",
        "peekOfCode": "vba_signature_filename = \"vbaProjectSignature.bin\"\n# Get the xlsm file name from the commandline.\nif len(sys.argv) > 1:\n    xlsm_file = sys.argv[1]\nelse:\n    print(\n        \"\\nUtility to extract a vbaProject.bin binary from an Excel 2007+ \"\n        \"xlsm macro file for insertion into an XlsxWriter file.\\n\"\n        \"If the macros are digitally signed, extracts also a vbaProjectSignature.bin \"\n        \"file.\\n\"",
        "detail": "llm-structured-resilice..venv.bin.vba_extract",
        "documentation": {}
    },
    {
        "label": "EventType",
        "kind": 6,
        "importPath": "llm-structured-resilice.models",
        "description": "llm-structured-resilice.models",
        "peekOfCode": "class EventType(str,Enum):\n    DIVIDEND_PAYMENT = \"Dividend Payment\"\n    RESULT_ANNOUNCEMENT = \"Result Announcement\"\n    MERGER_ANNOUNCEMENT = \"Merger Announcement\"\n    ACQUISITION_ANNOUNCEMENT = \"Acquisition Announcement\"\n    OTHER = \"Other\"\nclass StockType(str,Enum):\n    PREFERENCIAL = \"PREFERENCIAL\"\n    ORDINARIA = \"ORDINARIA\"\nclass Address(BaseModel):",
        "detail": "llm-structured-resilice.models",
        "documentation": {}
    },
    {
        "label": "StockType",
        "kind": 6,
        "importPath": "llm-structured-resilice.models",
        "description": "llm-structured-resilice.models",
        "peekOfCode": "class StockType(str,Enum):\n    PREFERENCIAL = \"PREFERENCIAL\"\n    ORDINARIA = \"ORDINARIA\"\nclass Address(BaseModel):\n    Country: str = Field(description=\"The country of the address\")\n    State: str = Field(description=\"The state of the address\")\n    City: str = Field(description=\"The city of the address\")\n    Street: str = Field(description=\"The street of the address\")\n    Number: str = Field(description=\"The number of the address\")\n    ZipCode: str = Field(description=\"The zip code of the address\")",
        "detail": "llm-structured-resilice.models",
        "documentation": {}
    },
    {
        "label": "Address",
        "kind": 6,
        "importPath": "llm-structured-resilice.models",
        "description": "llm-structured-resilice.models",
        "peekOfCode": "class Address(BaseModel):\n    Country: str = Field(description=\"The country of the address\")\n    State: str = Field(description=\"The state of the address\")\n    City: str = Field(description=\"The city of the address\")\n    Street: str = Field(description=\"The street of the address\")\n    Number: str = Field(description=\"The number of the address\")\n    ZipCode: str = Field(description=\"The zip code of the address\")\nclass DividentInfo(BaseModel):\n    Type: StockType = Field(description=\"The type of stock\")\n    Divident: float = Field(description=\"The dividend value\")",
        "detail": "llm-structured-resilice.models",
        "documentation": {}
    },
    {
        "label": "DividentInfo",
        "kind": 6,
        "importPath": "llm-structured-resilice.models",
        "description": "llm-structured-resilice.models",
        "peekOfCode": "class DividentInfo(BaseModel):\n    Type: StockType = Field(description=\"The type of stock\")\n    Divident: float = Field(description=\"The dividend value\")\n    Date: date = Field(description=\"The dividend date\")\n    PaymentDate: date = Field(description=\"The dividend payment date\")\nclass RelevantFacts(BaseModel):\n    Company: str = Field(description=\"The company that published the relevant fact\")\n    Date: date =  Field(description=\"The date of the relevant fact\")\n    Type: EventType = Field(description=\"The type of relevant fact\")\n    Local: Address = Field(description=\"The address of the relevant fact\")",
        "detail": "llm-structured-resilice.models",
        "documentation": {}
    },
    {
        "label": "RelevantFacts",
        "kind": 6,
        "importPath": "llm-structured-resilice.models",
        "description": "llm-structured-resilice.models",
        "peekOfCode": "class RelevantFacts(BaseModel):\n    Company: str = Field(description=\"The company that published the relevant fact\")\n    Date: date =  Field(description=\"The date of the relevant fact\")\n    Type: EventType = Field(description=\"The type of relevant fact\")\n    Local: Address = Field(description=\"The address of the relevant fact\")\n    DividendInfo: Optional[DividentInfo] = Field(description=\"The dividend information, only if the relevant fact is a dividend\",default=None)",
        "detail": "llm-structured-resilice.models",
        "documentation": {}
    },
    {
        "label": "SYSTEM_MESSAGE_TEXT",
        "kind": 5,
        "importPath": "llm-structured-resilice.prompts",
        "description": "llm-structured-resilice.prompts",
        "peekOfCode": "SYSTEM_MESSAGE_TEXT = \"You are a stock market analyst and need to extract information from a relevant fact published on a company's investor relations website.\"",
        "detail": "llm-structured-resilice.prompts",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": "mysql-connections.test-app..venv.bin.activate_this",
        "description": "mysql-connections.test-app..venv.bin.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len('bin') - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = 'test-app-py3.12' or os.path.basename(base)\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in '../lib/python3.12/site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": "mysql-connections.test-app..venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "mysql-connections.test-app..venv.bin.activate_this",
        "description": "mysql-connections.test-app..venv.bin.activate_this",
        "peekOfCode": "base = bin_dir[: -len('bin') - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = 'test-app-py3.12' or os.path.basename(base)\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in '../lib/python3.12/site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if '' else path)",
        "detail": "mysql-connections.test-app..venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": "mysql-connections.test-app..venv.bin.activate_this",
        "description": "mysql-connections.test-app..venv.bin.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = 'test-app-py3.12' or os.path.basename(base)\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in '../lib/python3.12/site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if '' else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": "mysql-connections.test-app..venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": "mysql-connections.test-app..venv.bin.activate_this",
        "description": "mysql-connections.test-app..venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = 'test-app-py3.12' or os.path.basename(base)\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in '../lib/python3.12/site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if '' else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "mysql-connections.test-app..venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": "mysql-connections.test-app..venv.bin.activate_this",
        "description": "mysql-connections.test-app..venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = 'test-app-py3.12' or os.path.basename(base)\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in '../lib/python3.12/site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if '' else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "mysql-connections.test-app..venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": "mysql-connections.test-app..venv.bin.activate_this",
        "description": "mysql-connections.test-app..venv.bin.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in '../lib/python3.12/site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if '' else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "mysql-connections.test-app..venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": "mysql-connections.test-app..venv.bin.activate_this",
        "description": "mysql-connections.test-app..venv.bin.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "mysql-connections.test-app..venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": "mysql-connections.test-app..venv.bin.activate_this",
        "description": "mysql-connections.test-app..venv.bin.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "mysql-connections.test-app..venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": "mysql-connections.test-app..venv.bin.activate_this",
        "description": "mysql-connections.test-app..venv.bin.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": "mysql-connections.test-app..venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "test_connection",
        "kind": 2,
        "importPath": "mysql-connections.test-app.main",
        "description": "mysql-connections.test-app.main",
        "peekOfCode": "def test_connection(port):\n    \"\"\"Test database connection\"\"\"\n    try:\n        connection = mysql.connector.connect(\n            host='localhost',\n            port=port,\n            user='root',\n            password='rootpass',\n            database='bank_db',\n            auth_plugin='mysql_native_password'",
        "detail": "mysql-connections.test-app.main",
        "documentation": {}
    },
    {
        "label": "execute_query",
        "kind": 2,
        "importPath": "mysql-connections.test-app.main",
        "description": "mysql-connections.test-app.main",
        "peekOfCode": "def execute_query(connection, query_id):\n    \"\"\"Execute a single SELECT query\"\"\"\n    start_time = time.time()\n    try:\n        cursor = connection.cursor()\n        # Simple queries to test\n        queries = [\n            \"SELECT COUNT(*) FROM TB_BANK_TRANSACTIONS\",\n            \"SELECT * FROM TB_BANK_TRANSACTIONS WHERE transaction_type = 'DEPOSIT' LIMIT 5\",\n            \"SELECT * FROM TB_BANK_TRANSACTIONS WHERE amount > 1000 LIMIT 5\",",
        "detail": "mysql-connections.test-app.main",
        "documentation": {}
    },
    {
        "label": "load_test_worker",
        "kind": 2,
        "importPath": "mysql-connections.test-app.main",
        "description": "mysql-connections.test-app.main",
        "peekOfCode": "def load_test_worker(thread_id, queries_per_second, duration, results, port):\n    \"\"\"Worker thread for load testing\"\"\"\n    try:\n        query_id = thread_id * 1000\n        start_time = time.time()\n        while time.time() - start_time < duration:\n            thread_start = time.time()\n            # Execute queries for this second\n            for i in range(queries_per_second):\n                if time.time() - start_time >= duration:",
        "detail": "mysql-connections.test-app.main",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "mysql-connections.test-app.main",
        "description": "mysql-connections.test-app.main",
        "peekOfCode": "def main():\n    # Parse command line arguments\n    parser = argparse.ArgumentParser(description='MySQL Load Test')\n    parser.add_argument('--port', type=int, default=3306, \n                       help='MySQL port (default: 3306)')\n    args = parser.parse_args()\n    port = args.port\n    print(\"🚀 Simple MySQL Load Test\")\n    print(\"=\" * 40)\n    print(f\"🔌 Connecting to MySQL on port {port}\")",
        "detail": "mysql-connections.test-app.main",
        "documentation": {}
    },
    {
        "label": "test_mysql_connection",
        "kind": 2,
        "importPath": "mysql-connections.test-app.test_connection",
        "description": "mysql-connections.test-app.test_connection",
        "peekOfCode": "def test_mysql_connection(port):\n    \"\"\"Test basic MySQL connection\"\"\"\n    try:\n        print(f\"🔌 Testing MySQL connection on port {port}...\")\n        connection = mysql.connector.connect(\n            host='localhost',\n            port=port,\n            user='root',\n            password='rootpass',\n            database='bank_db',",
        "detail": "mysql-connections.test-app.test_connection",
        "documentation": {}
    }
]